{"version":3,"sources":["api/revvData.js","components/Leaderboard.js","api/revvTransactions.js"],"names":["axios","create","baseURL","leaderboardPrefix","ownerSuffix","hiredSuffix","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","getArrayValue","array","field","value","result","filter","item","length","generatePrizeTable","prizeData","prizeDistribution","splitLeaderboard","totalPrizeString","dynamicPrizePoolRatio","prizeTable","unit","toUpperCase","includes","prizeTotal","replace","total","totalDrivers","hiredDrivers","hired","ownerDrivers","owner","ownerPercentage","hiredPercentage","halfSplit","rankRange","i","hiredPeoplePerPrize","ownerPeoplePerPrize","prize","j","parseInt","rank","rankString","toString","currentPrize","hiredPrize","toFixed","ownerPrize","Table","TableHead","TableRow","TableCell","TableBody","map","prizeRow","Card","sx","minWidth","CardContent","align","Prizes","prizeAsyncGenerator","a","generatePrizeTableContent","eventData","data","prize_total","state","LinearProgress","undefined","this","setPrizeTable","setState","Component","BootstrapDialogTitle","children","onClose","other","DialogTitle","m","p","IconButton","onClick","style","position","right","top","color","theme","palette","grey","columns","title","hidden","filterPlaceholder","render","rowData","Date","endTimestamp","getTime","trigger","closeOnDocumentClick","modal","closeOnEscape","close","Dialog","open","id","startTimestamp","type","formatEventData","singleDataPoint","parseFloat","prize_total_formatted","practice","sort","b","Leaderboard","BasicTable","revvData","get","then","response","setEventData","catch","e","console","error","setPrizeData","getREVVPrice","CoingeckoPrice","setREVVPrice","revv","usd","setWalletPosition","walletPositions","walletTransactions","columnsDeepCopy","JSON","parse","stringify","obj","totalREVV","totalDollars","totalRank","participatedREVVCount","paidTriesCount","totalTries","eventDeepCopy","forEach","event","REVVReward","dollarReward","tryCount","reduce","n","val","timeStamp","currentSession","currentWalletPosition","currentRank","time","millis","minutes","Math","floor","seconds","millisToMinutesAndSeconds","walletPrize","index","prizeRank","nextIndex","finalPrize","leaderboard_id","tries","RewardString","setAverages","setTotalPrizes","getWalletPositions","setEventDataLoaded","params","walletAddress","allleaderboards","ownerLeaderboard","hiredLeaderboard","ownerEntry","hiredEntry","leaderboard","revvTransactions","txns","filterTransactions","eventDataLoaded","REVVPrice","averageRank","averageREVV","averageTries","element","sessionID","count","$numberLong","entry","wallet","txn","tokenSymbol","to","Grid","container","spacing","md","xs","TextField","label","variant","fullWidth","focused","placeholder","onChange","setWalletAddress","target","alignContent","alignItems","Button","Fragment","disabled","width","display","icons","isLoading","options","pageSize","pageSizeOptions","filtering","selection","search","toolbar","grouping","exportButton","onSelectionChange","rows","row"],"mappings":"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","file":"static/js/9.7e93a1d4.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://us-east-1.aws.webhooks.mongodb-realm.com/api/client/v2.0/app/revv-suite-qdwss/service/revv-data/incoming_webhook/\",\r\n});\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport MaterialTable from 'material-table';\r\nimport { forwardRef } from 'react';\r\nimport CoingeckoPrice from '../api/CoingeckoPrice';\r\nimport revvData from '../api/revvData';\r\nimport revvTransactions from '../api/revvTransactions'\r\nimport Popup from 'reactjs-popup';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport theme from './theme';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst leaderboardPrefix = 'GAME_SESSION_ALPHA_A_'\r\nconst ownerSuffix = '_SPLIT_OWNER'\r\nconst hiredSuffix = '_SPLIT_HIRED'\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nfunction getArrayValue(array, field, value) {\r\n    let result = array.filter((item) => {\r\n        return item[field] === value\r\n    })\r\n    if (result.length > 0) {\r\n        return result[0]\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction generatePrizeTable(prizeData, prizeDistribution, splitLeaderboard, totalPrizeString, dynamicPrizePoolRatio) {\r\n    let prizeTable = <div></div>\r\n    let unit = \"$\"\r\n\r\n    if (totalPrizeString.toUpperCase().includes(\"REVV\")) {\r\n        unit = \"REVV\"\r\n    }\r\n    let prizeTotal = totalPrizeString.replace(/\\D/g, '');\r\n    if (prizeData && prizeData.total > 0) {\r\n        let totalDrivers = prizeData.total\r\n        let hiredDrivers = prizeData.hired\r\n        let ownerDrivers = prizeData.owner\r\n        let ownerPercentage = (ownerDrivers / totalDrivers)\r\n        let hiredPercentage = (hiredDrivers / totalDrivers)\r\n        let halfSplit = false\r\n        if (!dynamicPrizePoolRatio) {\r\n            ownerPercentage = 0.5\r\n            hiredPercentage = 0.5\r\n            halfSplit = true\r\n        }\r\n\r\n        let rankRange = false\r\n        for (const i in prizeDistribution) {\r\n            prizeDistribution[i].unit = unit\r\n            let hiredPeoplePerPrize = 1\r\n            let ownerPeoplePerPrize = 1\r\n            if (prizeDistribution[i].prize < 1 || halfSplit) {\r\n                if (i < prizeDistribution.length - 1) {\r\n                    let j = parseInt(i) + 1\r\n                    if (prizeDistribution[j].rank - prizeDistribution[i].rank > 1) {\r\n                        rankRange = true\r\n                        prizeDistribution[i].rankString = prizeDistribution[i].rank.toString() + ' - ' + (prizeDistribution[j].rank - 1).toString()\r\n                        hiredPeoplePerPrize = parseInt(prizeDistribution[j].rank) - parseInt(prizeDistribution[i].rank)\r\n                        ownerPeoplePerPrize = hiredPeoplePerPrize\r\n                    }\r\n                } else {\r\n                    if (rankRange) {\r\n                        prizeDistribution[i].rankString = prizeDistribution[i].rank.toString() + '+*'\r\n                        if (hiredDrivers > prizeDistribution[i].rank) {\r\n                            hiredPeoplePerPrize = hiredDrivers - prizeDistribution[i].rank\r\n                        } else {\r\n                            hiredPeoplePerPrize = -1\r\n                        }\r\n\r\n                        if (ownerDrivers > prizeDistribution[i].rank) {\r\n                            ownerPeoplePerPrize = ownerDrivers - prizeDistribution[i].rank\r\n                        } else {\r\n                            ownerPeoplePerPrize = -1\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!prizeDistribution[i].rankString) {\r\n                    prizeDistribution[i].rankString = prizeDistribution[i].rank.toString()\r\n                }\r\n\r\n                let currentPrize = prizeDistribution[i].prize * (halfSplit ? 1 : prizeTotal)\r\n                if (hiredPeoplePerPrize !== -1) {\r\n                    prizeDistribution[i].hiredPrize = ((halfSplit ? 1 : hiredPercentage) * currentPrize / hiredPeoplePerPrize).toFixed(2)\r\n                } else {\r\n                    prizeDistribution[i].hiredPrize = 0\r\n                }\r\n\r\n                if (ownerPeoplePerPrize !== -1) {\r\n                    prizeDistribution[i].ownerPrize = ((halfSplit ? 1 : ownerPercentage) * currentPrize / ownerPeoplePerPrize).toFixed(2)\r\n                } else {\r\n                    prizeDistribution[i].ownerPrize = 0\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        prizeTable = <Table>\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell>Rank</TableCell>\r\n                    <TableCell>Driver Prize {splitLeaderboard && '(' + (ownerPercentage * 100).toFixed(2) + '%)'}</TableCell>\r\n                    {splitLeaderboard && <TableCell>Hired Prize ({(hiredPercentage * 100).toFixed(2)}%)</TableCell>}\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    prizeDistribution.map((prizeRow) => (\r\n\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                {prizeRow.rankString ? prizeRow.rankString : prizeRow.rank}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {splitLeaderboard ? prizeRow.ownerPrize : prizeRow.prize} {unit}\r\n                            </TableCell>\r\n                            {splitLeaderboard && <TableCell>\r\n                                {prizeRow.hiredPrize} {unit}\r\n                            </TableCell>}\r\n                        </TableRow>\r\n                    ))\r\n                }\r\n            </TableBody>\r\n        </Table>\r\n    } else {\r\n        prizeTable = <Card sx={{ minWidth: 275 }}>\r\n            <CardContent align=\"center\">\r\n                <h1>Prize Data Not Available</h1>\r\n            </CardContent>\r\n        </Card>\r\n    }\r\n\r\n    return prizeTable\r\n}\r\n\r\nclass Prizes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            prizeTable: <LinearProgress />,\r\n            prizeData: undefined,\r\n        };\r\n    }\r\n\r\n    generatePrizeTableContent(prizeData, prizeDistribution, splitLeaderboard, totalPrizeString, dynamicPrizePoolRatio) {\r\n        this.setPrizeTable(generatePrizeTable(prizeData, prizeDistribution, splitLeaderboard, totalPrizeString, dynamicPrizePoolRatio))\r\n    }\r\n\r\n    setPrizeTable(value) {\r\n        this.setState({\r\n            prizeTable: value\r\n        })\r\n    }\r\n\r\n    prizeAsyncGenerator = async () => {\r\n        this.generatePrizeTableContent(this.props.eventData.prizeData,\r\n            this.props.eventData.data.prize,\r\n            this.props.eventData.data.splitLeaderboard,\r\n            this.props.eventData.data.prize_total.toString(),\r\n            this.props.eventData.data.dynamicPrizePoolRatio)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.prizeAsyncGenerator()\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.state.prizeTable}</div>\r\n    }\r\n}\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n};\r\nfunction millisToMinutesAndSeconds(millis) {\r\n    var minutes = Math.floor(millis / 60000);\r\n    var seconds = ((millis % 60000) / 1000).toFixed(3);\r\n    return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\r\n}\r\n\r\nconst columns = [\r\n    { title: \"Series\", field: \"data.series\", hidden: true },\r\n    { title: \"Name\", field: \"data.name\", filterPlaceholder: 'Filter Name' },\r\n    { title: \"Rank\", field: \"rank\", filterPlaceholder: 'Filter Rank', hidden: true },\r\n    { title: \"Time\", field: \"time\", filterPlaceholder: 'Filter Time', hidden: true },\r\n    { title: \"REVV\", field: \"RewardString\", filterPlaceholder: 'Filter REVV', hidden: true },\r\n    { title: \"Tries\", field: \"tries\", filterPlaceholder: 'Filter Tries', hidden: true },\r\n    {\r\n        title: \"View Pizes\", field: \"\", render: rowData => {\r\n            if (new Date(rowData.endTimestamp).getTime() < new Date().getTime()) {\r\n                return <Popup trigger={<a>View Prizes</a>} position=\"bottom center\" closeOnDocumentClick={false} modal closeOnEscape >\r\n                    {close => {\r\n                        return (\r\n                            <Dialog open onClose={close}>\r\n                                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={close}>\r\n                                    Prize Distribution\r\n                                </BootstrapDialogTitle>\r\n                                <Prizes eventData={rowData} />\r\n                            </Dialog>\r\n                        )\r\n                    }\r\n                    }\r\n                </Popup>\r\n            } else {\r\n                return <div>{new Date(rowData.startTimestamp).getTime() < new Date().getTime() ? 'In Progress' : 'Upcoming'}...</div>\r\n            }\r\n        }\r\n    },\r\n    { title: \"Start\", field: \"startTimestamp\", type: \"date\", filterPlaceholder: 'Filter Start' },\r\n    { title: \"End\", field: \"endTimestamp\", type: \"date\", filterPlaceholder: 'Filter End' },\r\n    { title: \"Track\", field: \"data.track\", filterPlaceholder: 'Filter Track' },\r\n    { title: \"Laps\", field: \"data.lapCount\", filterPlaceholder: 'Filter Laps' },\r\n    { title: \"Weather\", field: \"data.weather\", filterPlaceholder: 'Filter Weather' },\r\n    { title: \"Total Prize\", field: \"data.prize_total_formatted\", filterPlaceholder: 'Filter Prize' },\r\n    { title: \"id\", field: \"id\", hidden: true },\r\n    { title: \"percentagePrizePool\", field: \"data.percentagePrizePool\", hidden: true },\r\n    { title: \"dynamicPrizePoolRatio\", field: \"data.dynamicPrizePoolRatio\", hidden: true },\r\n    { title: \"splitLeaderboard\", field: \"data.splitLeaderboard\", hidden: true },\r\n];\r\n\r\n\r\nfunction formatEventData(eventData) {\r\n    eventData.map(singleDataPoint => {\r\n        singleDataPoint.startTimestamp = new Date(parseFloat(singleDataPoint.startTimestamp))\r\n        singleDataPoint.endTimestamp = new Date(parseFloat(singleDataPoint.endTimestamp))\r\n        if (singleDataPoint.data.prize_total.toString().toUpperCase().includes(\"REVV\")) {\r\n            singleDataPoint.data.prize_total_formatted = singleDataPoint.data.prize_total\r\n        } else {\r\n            singleDataPoint.data.prize_total_formatted = singleDataPoint.data.prize_total.toString() + \" $\"\r\n        }\r\n\r\n        return singleDataPoint\r\n    })\r\n\r\n    eventData = eventData.filter(singleDataPoint => { return !singleDataPoint.data.practice })\r\n\r\n    eventData.sort(function (a, b) {\r\n        return new Date(b.startTimestamp) - new Date(a.startTimestamp);\r\n    });\r\n\r\n    return eventData;\r\n}\r\n\r\n\r\nexport default class Leaderboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            eventData: undefined,\r\n            eventDataLoaded: false,\r\n            walletAddress: '',\r\n            walletPositions: undefined,\r\n            columns: columns,\r\n            totalREVV: undefined,\r\n            totalDollars: undefined,\r\n            totalTries: undefined,\r\n            REVVPrice: 0.0,\r\n            averageRank: 0.0,\r\n            averageREVV: 0.0,\r\n            averageTries: 0.0\r\n        };\r\n    }\r\n\r\n    setEventData(eventData) {\r\n        this.setState({\r\n            eventData: eventData,\r\n            eventDataLoaded: true\r\n        })\r\n    }\r\n\r\n    setEventDataLoaded(value) {\r\n        this.setState({ eventDataLoaded: value })\r\n    }\r\n\r\n    BasicTable = async () => {\r\n        let eventData\r\n        await revvData.get('events').then((response) => {\r\n            eventData = response.data\r\n            eventData = formatEventData(eventData);\r\n            this.setEventData(eventData);\r\n        }).catch((e) => {\r\n            console.error(e)\r\n        })\r\n\r\n        await revvData.get('leaderboards').then((response) => {\r\n            this.setPrizeData(response.data)\r\n        }).catch((e) => {\r\n            console.error(e)\r\n        })\r\n    };\r\n\r\n    setPrizeData(value) {\r\n        let prizeData = {}\r\n        value.forEach(element => {\r\n            let owner = element.leaderboard_id.includes(ownerSuffix)\r\n            let hired = element.leaderboard_id.includes(hiredSuffix)\r\n            let sessionID = element.leaderboard_id.replace(leaderboardPrefix, '').replace(ownerSuffix, '').replace(hiredSuffix, '')\r\n            let count = parseInt(element.count.$numberLong)\r\n\r\n            if (owner) {\r\n                if (!prizeData[sessionID]) {\r\n                    prizeData[sessionID] = { 'owner': count }\r\n                } else {\r\n                    prizeData[sessionID].owner = count\r\n                }\r\n            }\r\n\r\n            if (hired) {\r\n                if (!prizeData[sessionID]) {\r\n                    prizeData[sessionID] = { 'hired': count }\r\n                } else {\r\n                    prizeData[sessionID].hired = count\r\n                }\r\n            }\r\n\r\n            if (!owner && !hired) {\r\n                if (!prizeData[sessionID]) {\r\n                    prizeData[sessionID] = { 'total': count }\r\n                } else {\r\n                    prizeData[sessionID].total = count\r\n                }\r\n            }\r\n\r\n            if (prizeData[sessionID] && prizeData[sessionID].hired && prizeData[sessionID].owner) {\r\n                prizeData[sessionID].total = parseInt(prizeData[sessionID].hired) + parseInt(prizeData[sessionID].owner)\r\n            }\r\n        });\r\n        let eventDeepCopy = JSON.parse(JSON.stringify(this.state.eventData));\r\n\r\n        eventDeepCopy.forEach(event => {\r\n            if (prizeData[event.id.toUpperCase()]) {\r\n                event.prizeData = prizeData[event.id.toUpperCase()]\r\n            }\r\n        })\r\n\r\n        this.setEventData(eventDeepCopy)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.BasicTable();\r\n    }\r\n\r\n    setWalletAddress(value) {\r\n        this.setState({\r\n            walletAddress: value,\r\n            walletPositions: undefined,\r\n            columns: columns,\r\n            totalREVV: undefined,\r\n            totalDollars: undefined,\r\n            totalTries: undefined,\r\n            REVVPrice: 0.0,\r\n            averageRank: 0.0,\r\n            averageREVV: 0.0,\r\n            averageTries: 0.0\r\n        })\r\n    }\r\n\r\n    filterWallet(entry) {\r\n        return entry.wallet === this.walletAddress\r\n    }\r\n\r\n    setREVVPrice(REVVPrice) {\r\n        this.setState({\r\n            REVVPrice: REVVPrice\r\n        })\r\n    }\r\n\r\n\r\n    getREVVPrice = async (e) => {\r\n        await CoingeckoPrice\r\n            .get(`price?ids=revv&vs_currencies=usd`)\r\n            .then((response) => {\r\n                this.setREVVPrice(response.data.revv.usd)\r\n            }).catch((e) => {\r\n                console.error(e)\r\n            });\r\n    }\r\n\r\n    setWalletPosition = (walletPositions, walletTransactions) => {\r\n        this.setState({ walletPositions: walletPositions })\r\n        let columnsDeepCopy = JSON.parse(JSON.stringify(this.state.columns));\r\n        columnsDeepCopy = columnsDeepCopy.filter(function (obj) {\r\n            return obj.field !== '';\r\n        });\r\n\r\n        columnsDeepCopy[2].hidden = false\r\n        columnsDeepCopy[3].hidden = false\r\n        columnsDeepCopy[4].hidden = false\r\n        columnsDeepCopy[5].hidden = false\r\n\r\n        this.setState({\r\n            columns: columnsDeepCopy\r\n        });\r\n\r\n        this.getREVVPrice()\r\n\r\n        let totalREVV = 0.0\r\n        let totalDollars = 0.0\r\n        let totalRank = 0.0\r\n        let participatedREVVCount = 0.0\r\n        let paidTriesCount = 0.0\r\n        let totalTries = 0.0\r\n\r\n        let eventDeepCopy = JSON.parse(JSON.stringify(this.state.eventData));\r\n\r\n        eventDeepCopy.forEach(event => {\r\n            event.REVVReward = 0.0\r\n            event.dollarReward = 0.0\r\n            event.rank = 0\r\n            let tryCount = walletTransactions.reduce(function (n, val) {\r\n                return n + (new Date(val.timeStamp) >= new Date(event.startTimestamp) && new Date(val.timeStamp) <= new Date(event.endTimestamp));\r\n            }, 0);\r\n            let currentSession = event.prizeData\r\n            if (currentSession && walletPositions[event.id]) {\r\n                let currentWalletPosition = walletPositions[event.id]\r\n                let currentRank = parseInt(currentWalletPosition.rank)\r\n                event.rank = currentRank\r\n                event.time = millisToMinutesAndSeconds(walletPositions[event.id].time)\r\n                generatePrizeTable(currentSession,\r\n                    event.data.prize,\r\n                    event.data.splitLeaderboard,\r\n                    event.data.prize_total.toString(),\r\n                    event.data.dynamicPrizePoolRatio)\r\n\r\n                let prize = event.data.prize\r\n                let walletPrize = undefined\r\n                for (let index = 0; index < prize.length; index++) {\r\n                    const prizeRank = prize[index];\r\n                    const nextIndex = index + 1\r\n                    if (nextIndex === prize.length) {\r\n                        walletPrize = prizeRank\r\n                        break;\r\n                    } else if (currentRank >= parseInt(prizeRank.rank) && currentRank < parseInt(prize[nextIndex].rank)) {\r\n                        walletPrize = prizeRank\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                event.unit = \"REVV\"\r\n                if (walletPrize) {\r\n                    let finalPrize = ''\r\n                    if (currentWalletPosition.leaderboard_id.includes(\"SPLIT\")) {\r\n                        finalPrize = currentWalletPosition.hired ? walletPrize.hiredPrize : walletPrize.ownerPrize\r\n                    } else {\r\n                        finalPrize = walletPrize.prize\r\n                    }\r\n\r\n                    if (walletPrize.unit === \"REVV\") {\r\n                        event.tries = tryCount\r\n                        totalTries += parseFloat(tryCount)\r\n                        if (tryCount > 0) {\r\n                            paidTriesCount += 1.0\r\n                        }\r\n                        participatedREVVCount += 1.0\r\n                        event.REVVReward += parseFloat(finalPrize)\r\n                        event.RewardString = event.REVVReward.toString() + \" REVV\"\r\n                        totalREVV += parseFloat(finalPrize)\r\n                        totalRank += currentRank\r\n                    } else {\r\n                        event.unit = \"$\"\r\n                        event.tries = tryCount\r\n                        event.dollarReward += parseFloat(finalPrize)\r\n                        totalDollars += parseFloat(finalPrize)\r\n                        event.RewardString = event.dollarReward.toString() + \" $\"\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (totalRank > 0 && totalREVV > 0) {\r\n            this.setAverages(totalREVV / participatedREVVCount, totalRank / participatedREVVCount, totalTries / paidTriesCount)\r\n        } else {\r\n            this.setAverages(0, 0)\r\n        }\r\n\r\n        this.setTotalPrizes(totalREVV, totalDollars, totalTries)\r\n        this.setEventData(eventDeepCopy)\r\n    }\r\n\r\n    setTotalPrizes(totalREVV, totalDollars, totalTries) {\r\n        this.setState({\r\n            totalREVV: totalREVV,\r\n            totalDollars: totalDollars,\r\n            totalTries: totalTries,\r\n        })\r\n    }\r\n\r\n    getWalletPositions = async () => {\r\n        this.setEventDataLoaded(false)\r\n        let walletPositions = {};\r\n        let allleaderboards = await revvData.get('walletPositions', { params: { walletAddress: this.state.walletAddress.toUpperCase() } })\r\n        allleaderboards = allleaderboards.data\r\n        this.state.eventData.forEach(event => {\r\n            if (event.data.splitLeaderboard) {\r\n                let ownerLeaderboard = leaderboardPrefix + event.id.toUpperCase() + ownerSuffix\r\n                let hiredLeaderboard = leaderboardPrefix + event.id.toUpperCase() + hiredSuffix\r\n                let ownerEntry = getArrayValue(allleaderboards, 'leaderboard_id', ownerLeaderboard)\r\n                let hiredEntry = getArrayValue(allleaderboards, 'leaderboard_id', hiredLeaderboard)\r\n\r\n                if (ownerEntry) {\r\n                    walletPositions[event.id] = ownerEntry\r\n                } else if (hiredEntry) {\r\n                    hiredEntry.hired = true\r\n                    walletPositions[event.id] = hiredEntry\r\n                }\r\n            } else {\r\n                let leaderboard = leaderboardPrefix + event.id.toUpperCase()\r\n                let ownerEntry = getArrayValue(allleaderboards, 'leaderboard_id', leaderboard)\r\n                if (ownerEntry) {\r\n                    walletPositions[event.id] = ownerEntry\r\n                }\r\n            }\r\n        });\r\n\r\n        let txns\r\n        await revvTransactions\r\n            .get(`&address=${this.state.walletAddress}`)\r\n            .then((response) => {\r\n                txns = response.data.result\r\n                txns = this.filterTransactions(txns);\r\n            }).catch((e) => {\r\n                console.error(e);\r\n            });\r\n\r\n        this.setWalletPosition(walletPositions, txns)\r\n    }\r\n\r\n    filterTransactions(txns) {\r\n        txns = txns.filter((txn) => {\r\n            return txn.tokenSymbol === \"REVV\" && txn.to.toUpperCase() === \"0x069895FdA566d0364ABEc6e290BeE3D565c55666\".toUpperCase() &&\r\n                txn.value === \"5000000000000000000\";\r\n        });\r\n\r\n        txns = txns.map((txn) => {\r\n            txn.timeStamp = new Date(txn.timeStamp * 1000)\r\n            return txn;\r\n        })\r\n\r\n        return txns;\r\n    }\r\n\r\n\r\n    setAverages(averageREVV, averageRank, averageTries) {\r\n        this.setState({\r\n            averageREVV: averageREVV,\r\n            averageRank: averageRank,\r\n            averageTries: averageTries,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Grid container spacing={3} >\r\n                <Grid item md={12} xs={12}>\r\n                    <TextField\r\n                        id=\"wallet-address\"\r\n                        label=\"Wallet Address\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        focused\r\n                        placeholder=\"0x000...\"\r\n                        onChange={(e) => this.setWalletAddress(e.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                    <Button color=\"primary\" fullWidth variant=\"contained\" onClick={() => this.getWalletPositions()} >Get Wallet List</Button>\r\n                </Grid>\r\n                {this.state.totalREVV &&\r\n                    <React.Fragment>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"totalRevv\"\r\n                                label=\"Total REVV (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.totalREVV.toFixed(2).toString() + \" REVV\" + (this.state.REVVPrice ? \" (\" + (this.state.REVVPrice * this.state.totalREVV).toFixed(2).toString() + \" $)\" : \"\")}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"totalDollars\"\r\n                                label=\"Total Dollars (Old Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.totalDollars.toFixed(2).toString() + \" $\"}\r\n                            />\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                }{this.state.averageRank > 0 &&\r\n                    <React.Fragment>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"averageRank\"\r\n                                label=\"Average Rank (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.averageRank.toFixed(0).toString()}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"averageREVV\"\r\n                                label=\"Average REVV Earned (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.averageREVV.toFixed(2).toString() + \" REVV\" + (this.state.REVVPrice ? \" (\" + (this.state.REVVPrice * this.state.averageREVV).toFixed(2).toString() + \" $)\" : \"\")}\r\n                            />\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                }{this.state.totalTries &&\r\n                    <React.Fragment>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"totalTries\"\r\n                                label=\"Total Tries (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.totalTries.toFixed(0).toString() + \" Tries\" + (this.state.REVVPrice ? \" (\" + (this.state.totalTries * 5) + \" REVV/\" + (this.state.REVVPrice * this.state.totalTries * 5).toFixed(2).toString() + \" $)\" : \"\")}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"averageTries\"\r\n                                label=\"Average Tries (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.averageTries.toFixed(0).toString() + \" Tries\" + (this.state.REVVPrice ? \" (\" + (this.state.averageTries * 5).toFixed(2) + \" REVV/\" + (this.state.REVVPrice * this.state.averageTries * 5).toFixed(2).toString() + \" $)\" : \"\")}\r\n                            />\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                }\r\n                <Grid item xs={12}>\r\n                    <MaterialTable\r\n                        theme={theme()}\r\n                        style={{ width: \"100%\", display: \"grid\" }}\r\n                        title=\"REVV Leaderboards\"\r\n                        columns={this.state.columns}\r\n                        data={this.state.eventData}\r\n                        icons={tableIcons}\r\n                        isLoading={!this.state.eventDataLoaded}\r\n                        options={{\r\n                            pageSize: 10,\r\n                            pageSizeOptions: [5, 10, 20, { value: this.state.eventData ? parseInt(this.state.eventData.length) : 100, label: 'All' }],\r\n                            filtering: true,\r\n                            selection: true,\r\n                            search: false,\r\n                            toolbar: true,\r\n                            grouping: true,\r\n                            exportButton: true\r\n\r\n                        }}\r\n                        onSelectionChange={(rows) => {\r\n                            let totalREVV = 0.0\r\n                            let totalDollars = 0.0\r\n                            let totalRank = 0.0\r\n                            let participatedREVVCount = 0.0\r\n                            let paidTriesCount = 0.0\r\n                            let totalTries = 0.0\r\n\r\n                            if (rows.length === 0) {\r\n                                rows = this.state.eventData\r\n                            }\r\n\r\n                            rows.forEach(row => {\r\n                                totalREVV += parseFloat(row.REVVReward)\r\n                                totalDollars += parseFloat(row.dollarReward)\r\n                                if (row.unit === \"REVV\") {\r\n                                    totalRank += parseFloat(row.rank)\r\n                                    participatedREVVCount += 1.0\r\n                                    totalTries += row.tries\r\n                                    if (row.tries && row.tries > 0) {\r\n                                        paidTriesCount += 1.0\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            if (totalRank > 0 && totalREVV > 0) {\r\n                                this.setAverages(totalREVV / participatedREVVCount, totalRank / participatedREVVCount, totalTries / paidTriesCount)\r\n                            } else {\r\n                                this.setAverages(0, 0)\r\n                            }\r\n\r\n                            this.setTotalPrizes(totalREVV, totalDollars, totalTries)\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://api.polygonscan.com/api?module=account&action=tokentx&contractaddress=0x70c006878a5a50ed185ac4c87d837633923de296&sort=desc&apikey=NW6MQ4UW5JIEVBH61JW4AK3WY2Q27ZZIM7\"\r\n});"],"sourceRoot":""}