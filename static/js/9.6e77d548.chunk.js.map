{"version":3,"sources":["api/revvData.js","components/Leaderboard.js","api/revvTransactions.js"],"names":["axios","create","baseURL","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","getArrayValue","array","field","value","result","filter","item","length","generatePrizeTable","prizeData","prizeDistribution","splitLeaderboard","totalPrizeString","dynamicPrizePoolRatio","prizeTable","unit","toUpperCase","includes","prizeTotal","replace","total","totalDrivers","hiredDrivers","hired","ownerPercentage","owner","hiredPercentage","halfSplit","rankRange","i","peoplePerPrize","prize","j","parseInt","rank","rankString","toString","currentPrize","hiredPrize","toFixed","ownerPrize","Table","TableHead","TableRow","TableCell","TableBody","map","prizeRow","Card","sx","minWidth","CardContent","align","Prizes","getPrizeData","a","sessionID","eventData","id","revvData","get","params","then","response","data","setPrizeData","catch","e","console","error","state","LinearProgress","undefined","this","setState","generatePrizeTableContent","prize_total","setPrizeTable","Component","BootstrapDialogTitle","children","onClose","other","DialogTitle","m","p","IconButton","onClick","style","position","right","top","color","theme","palette","grey","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","columns","title","hidden","filterPlaceholder","render","rowData","Date","endTimestamp","getTime","trigger","closeOnDocumentClick","modal","closeOnEscape","close","Dialog","open","startTimestamp","type","formatEventData","singleDataPoint","parseFloat","prize_total_formatted","practice","sort","b","Leaderboard","BasicTable","setEventData","setEventDataLoaded","getREVVPrice","CoingeckoPrice","setREVVPrice","revv","usd","setWalletPosition","walletPositions","walletTransactions","columnsDeepCopy","JSON","parse","stringify","obj","totalREVV","totalDollars","totalRank","participatedREVVCount","paidTriesCount","totalTries","eventDeepCopy","allSessions","forEach","event","REVVReward","dollarReward","tryCount","reduce","n","val","timeStamp","currentSession","currentWalletPosition","currentRank","time","walletPrize","index","prizeRank","nextIndex","finalPrize","leaderboard_id","tries","RewardString","setAverages","setTotalPrizes","getWalletPositions","walletAddress","allleaderboards","leaderboardPrefix","ownerLeaderboard","hiredLeaderboard","ownerEntry","hiredEntry","leaderboard","revvTransactions","txns","filterTransactions","eventDataLoaded","REVVPrice","averageRank","averageREVV","averageTries","entry","wallet","txn","tokenSymbol","to","Grid","container","spacing","md","xs","TextField","label","variant","fullWidth","focused","placeholder","onChange","setWalletAddress","target","alignContent","alignItems","Button","Fragment","disabled","width","display","icons","isLoading","options","pageSize","pageSizeOptions","filtering","selection","search","toolbar","grouping","exportButton","onSelectionChange","rows","row"],"mappings":"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","file":"static/js/9.6e77d548.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://us-east-1.aws.webhooks.mongodb-realm.com/api/client/v2.0/app/revv-suite-qdwss/service/revv-data/incoming_webhook/\",\r\n});\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport MaterialTable from 'material-table';\r\nimport { forwardRef } from 'react';\r\nimport CoingeckoPrice from '../api/CoingeckoPrice';\r\nimport revvData from '../api/revvData';\r\nimport revvTransactions from '../api/revvTransactions'\r\nimport Popup from 'reactjs-popup';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport theme from './theme';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nfunction getArrayValue(array, field, value) {\r\n    let result = array.filter((item) => {\r\n        return item[field] === value\r\n    })\r\n    if (result.length > 0) {\r\n        return result[0]\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction generatePrizeTable(prizeData, prizeDistribution, splitLeaderboard, totalPrizeString, dynamicPrizePoolRatio) {\r\n    let prizeTable = <div></div>\r\n    let unit = \"$\"\r\n    if (totalPrizeString.toUpperCase().includes(\"REVV\")) {\r\n        unit = \"REVV\"\r\n    }\r\n    let prizeTotal = totalPrizeString.replace(/\\D/g, '');\r\n    if (prizeData && prizeData.total > 0) {\r\n        let totalDrivers = prizeData.total\r\n        let hiredDrivers = prizeData.hired\r\n        let ownerDrivers = prizeData.owner\r\n        let ownerPercentage = (ownerDrivers / totalDrivers)\r\n        let hiredPercentage = (hiredDrivers / totalDrivers)\r\n        let halfSplit = false\r\n        if (!dynamicPrizePoolRatio) {\r\n            ownerPercentage = 0.5\r\n            hiredPercentage = 0.5\r\n            halfSplit = true\r\n        }\r\n\r\n        let rankRange = false\r\n        for (const i in prizeDistribution) {\r\n            prizeDistribution[i].unit = unit\r\n            let peoplePerPrize = 1\r\n            if (prizeDistribution[i].prize < 1 || halfSplit) {\r\n                if (i < prizeDistribution.length - 1) {\r\n                    let j = parseInt(i) + 1\r\n                    if (prizeDistribution[j].rank - prizeDistribution[i].rank > 1) {\r\n                        rankRange = true\r\n                        prizeDistribution[i].rankString = prizeDistribution[i].rank.toString() + ' - ' + (prizeDistribution[j].rank - 1).toString()\r\n                        peoplePerPrize = parseInt(prizeDistribution[j].rank) - parseInt(prizeDistribution[i].rank)\r\n                    }\r\n                } else {\r\n                    if (rankRange) {\r\n                        prizeDistribution[i].rankString = prizeDistribution[i].rank.toString() + '+*'\r\n                        peoplePerPrize = 3000\r\n                    }\r\n                }\r\n\r\n                if (!prizeDistribution[i].rankString) {\r\n                    prizeDistribution[i].rankString = prizeDistribution[i].rank.toString()\r\n                }\r\n\r\n                let currentPrize = prizeDistribution[i].prize * (halfSplit ? 1 : prizeTotal)\r\n                prizeDistribution[i].hiredPrize = ((halfSplit ? 1 : hiredPercentage) * currentPrize / peoplePerPrize).toFixed(2)\r\n                prizeDistribution[i].ownerPrize = ((halfSplit ? 1 : ownerPercentage) * currentPrize / peoplePerPrize).toFixed(2)\r\n\r\n            }\r\n        }\r\n\r\n        prizeTable = <Table>\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell>Rank</TableCell>\r\n                    <TableCell>Driver Prize {splitLeaderboard && '(' + (ownerPercentage * 100).toFixed(2) + '%)'}</TableCell>\r\n                    {splitLeaderboard && <TableCell>Hired Prize ({(hiredPercentage * 100).toFixed(2)}%)</TableCell>}\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    prizeDistribution.map((prizeRow) => (\r\n\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                {prizeRow.rankString ? prizeRow.rankString : prizeRow.rank}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {splitLeaderboard ? prizeRow.ownerPrize : prizeRow.prize} {unit}\r\n                            </TableCell>\r\n                            {splitLeaderboard && <TableCell>\r\n                                {prizeRow.hiredPrize} {unit}\r\n                            </TableCell>}\r\n                        </TableRow>\r\n                    ))\r\n                }\r\n            </TableBody>\r\n        </Table>\r\n    } else {\r\n        prizeTable = <Card sx={{ minWidth: 275 }}>\r\n            <CardContent align=\"center\">\r\n                <h1>Prize Data Not Available</h1>\r\n            </CardContent>\r\n        </Card>\r\n    }\r\n\r\n    return prizeTable\r\n}\r\n\r\nclass Prizes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            prizeTable: <LinearProgress />,\r\n            prizeData: undefined,\r\n        };\r\n    }\r\n\r\n    setPrizeData(value) {\r\n        this.setState({\r\n            prizeData: value\r\n        });\r\n\r\n        this.generatePrizeTableContent(value,\r\n            this.props.eventData.data.prize,\r\n            this.props.eventData.data.splitLeaderboard,\r\n            this.props.eventData.data.prize_total.toString(),\r\n            this.props.eventData.data.dynamicPrizePoolRatio)\r\n    }\r\n\r\n    generatePrizeTableContent(prizeData, prizeDistribution, splitLeaderboard, totalPrizeString, dynamicPrizePoolRatio) {\r\n        this.setPrizeTable(generatePrizeTable(prizeData, prizeDistribution, splitLeaderboard, totalPrizeString, dynamicPrizePoolRatio))\r\n    }\r\n\r\n    setPrizeTable(value) {\r\n        this.setState({\r\n            prizeTable: value\r\n        })\r\n    }\r\n\r\n    getPrizeData = async () => {\r\n        let prizeData;\r\n        let sessionID = this.props.eventData.id.toUpperCase();\r\n        await revvData.get('prizes', { params: { sessionID: sessionID } }).then((response) => {\r\n            prizeData = response.data[0]\r\n            this.setPrizeData(prizeData);\r\n        }).catch((e) => {\r\n            console.error(e)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPrizeData()\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.state.prizeTable}</div>\r\n    }\r\n}\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n};\r\nfunction millisToMinutesAndSeconds(millis) {\r\n    var minutes = Math.floor(millis / 60000);\r\n    var seconds = ((millis % 60000) / 1000).toFixed(3);\r\n    return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\r\n}\r\n\r\nconst columns = [\r\n    { title: \"Series\", field: \"data.series\", hidden: true },\r\n    { title: \"Name\", field: \"data.name\", filterPlaceholder: 'Filter Name' },\r\n    { title: \"Rank\", field: \"rank\", filterPlaceholder: 'Filter Rank', hidden: true },\r\n    { title: \"Time\", field: \"time\", filterPlaceholder: 'Filter Time', hidden: true },\r\n    { title: \"REVV\", field: \"RewardString\", filterPlaceholder: 'Filter REVV', hidden: true },\r\n    { title: \"Tries\", field: \"tries\", filterPlaceholder: 'Filter Tries', hidden: true },\r\n    {\r\n        title: \"View Pizes\", field: \"\", render: rowData => {\r\n            if (new Date(rowData.endTimestamp).getTime() < new Date().getTime()) {\r\n                return <Popup trigger={<a>View Prizes</a>} position=\"bottom center\" closeOnDocumentClick={false} modal closeOnEscape >\r\n                    {close => {\r\n                        return (\r\n                            <Dialog open onClose={close}>\r\n                                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={close}>\r\n                                    Prize Distribution\r\n                                </BootstrapDialogTitle>\r\n                                <Prizes eventData={rowData} />\r\n                            </Dialog>\r\n                        )\r\n                    }\r\n                    }\r\n                </Popup>\r\n            } else {\r\n                return <div>{new Date(rowData.startTimestamp).getTime() < new Date().getTime() ? 'In Progress' : 'Upcoming'}...</div>\r\n            }\r\n        }\r\n    },\r\n    { title: \"Start\", field: \"startTimestamp\", type: \"date\", filterPlaceholder: 'Filter Start' },\r\n    { title: \"End\", field: \"endTimestamp\", type: \"date\", filterPlaceholder: 'Filter End' },\r\n    { title: \"Track\", field: \"data.track\", filterPlaceholder: 'Filter Track' },\r\n    { title: \"Laps\", field: \"data.lapCount\", filterPlaceholder: 'Filter Laps' },\r\n    { title: \"Weather\", field: \"data.weather\", filterPlaceholder: 'Filter Weather' },\r\n    { title: \"Total Prize\", field: \"data.prize_total_formatted\", filterPlaceholder: 'Filter Prize' },\r\n    { title: \"id\", field: \"id\", hidden: true },\r\n    { title: \"percentagePrizePool\", field: \"data.percentagePrizePool\", hidden: true },\r\n    { title: \"dynamicPrizePoolRatio\", field: \"data.dynamicPrizePoolRatio\", hidden: true },\r\n    { title: \"splitLeaderboard\", field: \"data.splitLeaderboard\", hidden: true },\r\n];\r\n\r\n\r\nfunction formatEventData(eventData) {\r\n    eventData.map(singleDataPoint => {\r\n        singleDataPoint.startTimestamp = new Date(parseFloat(singleDataPoint.startTimestamp))\r\n        singleDataPoint.endTimestamp = new Date(parseFloat(singleDataPoint.endTimestamp))\r\n        if (singleDataPoint.data.prize_total.toString().toUpperCase().includes(\"REVV\")) {\r\n            singleDataPoint.data.prize_total_formatted = singleDataPoint.data.prize_total\r\n        } else {\r\n            singleDataPoint.data.prize_total_formatted = singleDataPoint.data.prize_total.toString() + \" $\"\r\n        }\r\n\r\n        return singleDataPoint\r\n    })\r\n\r\n    eventData = eventData.filter(singleDataPoint => { return !singleDataPoint.data.practice })\r\n\r\n    eventData.sort(function (a, b) {\r\n        return new Date(b.startTimestamp) - new Date(a.startTimestamp);\r\n    });\r\n\r\n    return eventData;\r\n}\r\n\r\n\r\nexport default class Leaderboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            eventData: undefined,\r\n            eventDataLoaded: false,\r\n            walletAddress: '',\r\n            walletPositions: undefined,\r\n            columns: columns,\r\n            totalREVV: undefined,\r\n            totalDollars: undefined,\r\n            totalTries: undefined,\r\n            REVVPrice: 0.0,\r\n            averageRank: 0.0,\r\n            averageREVV: 0.0,\r\n            averageTries: 0.0\r\n        };\r\n    }\r\n\r\n    setEventData(eventData) {\r\n        this.setState({ eventData: eventData })\r\n    }\r\n\r\n    setEventDataLoaded(value) {\r\n        this.setState({ eventDataLoaded: value })\r\n    }\r\n\r\n    BasicTable = async () => {\r\n        let eventData\r\n        await revvData.get('events').then((response) => {\r\n            eventData = response.data\r\n            eventData = formatEventData(eventData);\r\n            this.setEventData(eventData);\r\n            this.setEventDataLoaded(true);\r\n        }).catch((e) => {\r\n            console.error(e)\r\n        })\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.BasicTable();\r\n    }\r\n\r\n    setWalletAddress(value) {\r\n        this.setState({\r\n            walletAddress: value,\r\n            walletPositions: undefined,\r\n            columns: columns,\r\n            totalREVV: undefined,\r\n            totalDollars: undefined,\r\n            totalTries: undefined,\r\n            REVVPrice: 0.0,\r\n            averageRank: 0.0,\r\n            averageREVV: 0.0,\r\n            averageTries: 0.0\r\n        })\r\n    }\r\n\r\n    filterWallet(entry) {\r\n        return entry.wallet === this.walletAddress\r\n    }\r\n\r\n    setREVVPrice(REVVPrice) {\r\n        this.setState({\r\n            REVVPrice: REVVPrice\r\n        })\r\n    }\r\n\r\n\r\n    getREVVPrice = async (e) => {\r\n        await CoingeckoPrice\r\n            .get(`price?ids=revv&vs_currencies=usd`)\r\n            .then((response) => {\r\n                this.setREVVPrice(response.data.revv.usd)\r\n            }).catch((e) => {\r\n                console.error(e)\r\n            });\r\n    }\r\n\r\n    setWalletPosition = async (walletPositions, walletTransactions) => {\r\n        this.setState({ walletPositions: walletPositions })\r\n        let columnsDeepCopy = JSON.parse(JSON.stringify(this.state.columns));\r\n        columnsDeepCopy = columnsDeepCopy.filter(function (obj) {\r\n            return obj.field !== '';\r\n        });\r\n\r\n        columnsDeepCopy[2].hidden = false\r\n        columnsDeepCopy[3].hidden = false\r\n        columnsDeepCopy[4].hidden = false\r\n        columnsDeepCopy[5].hidden = false\r\n\r\n        this.setState({\r\n            columns: columnsDeepCopy\r\n        });\r\n\r\n        this.getREVVPrice()\r\n\r\n        let totalREVV = 0.0\r\n        let totalDollars = 0.0\r\n        let totalRank = 0.0\r\n        let participatedREVVCount = 0.0\r\n        let paidTriesCount = 0.0\r\n        let totalTries = 0.0\r\n\r\n        let eventDeepCopy = JSON.parse(JSON.stringify(this.state.eventData));\r\n        let allSessions\r\n        await revvData.get('prizes').then((response) => {\r\n            allSessions = response.data\r\n        }).catch((e) => {\r\n            console.error(e)\r\n        })\r\n\r\n        eventDeepCopy.forEach(event => {\r\n            event.REVVReward = 0.0\r\n            event.dollarReward = 0.0\r\n            event.rank = 0\r\n            let tryCount = walletTransactions.reduce(function (n, val) {\r\n                return n + (new Date(val.timeStamp) >= new Date(event.startTimestamp) && new Date(val.timeStamp) <= new Date(event.endTimestamp));\r\n            }, 0);\r\n\r\n\r\n            let currentSession = getArrayValue(allSessions, \"session_id\", event.id.toUpperCase())\r\n            if (currentSession && walletPositions[event.id]) {\r\n                let currentWalletPosition = walletPositions[event.id]\r\n                let currentRank = parseInt(currentWalletPosition.rank)\r\n                event.rank = currentRank\r\n                event.time = millisToMinutesAndSeconds(walletPositions[event.id].time)\r\n                generatePrizeTable(currentSession,\r\n                    event.data.prize,\r\n                    event.data.splitLeaderboard,\r\n                    event.data.prize_total.toString(),\r\n                    event.data.dynamicPrizePoolRatio)\r\n\r\n                let prize = event.data.prize\r\n                let walletPrize = undefined\r\n                for (let index = 0; index < prize.length; index++) {\r\n                    const prizeRank = prize[index];\r\n                    const nextIndex = index + 1\r\n                    if (nextIndex === prize.length) {\r\n                        walletPrize = prizeRank\r\n                        break;\r\n                    } else if (currentRank >= parseInt(prizeRank.rank) && currentRank < parseInt(prize[nextIndex].rank)) {\r\n                        walletPrize = prizeRank\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                event.unit = \"REVV\"\r\n                if (walletPrize) {\r\n                    let finalPrize = ''\r\n                    if (currentWalletPosition.leaderboard_id.includes(\"SPLIT\")) {\r\n                        finalPrize = currentWalletPosition.hired ? walletPrize.hiredPrize : walletPrize.ownerPrize\r\n                    } else {\r\n                        finalPrize = walletPrize.prize\r\n                    }\r\n\r\n                    if (walletPrize.unit === \"REVV\") {\r\n                        event.tries = tryCount\r\n                        totalTries += parseFloat(tryCount)\r\n                        if (tryCount > 0) {\r\n                            paidTriesCount += 1.0\r\n                        }\r\n                        participatedREVVCount += 1.0\r\n                        event.REVVReward += parseFloat(finalPrize)\r\n                        event.RewardString = event.REVVReward.toString() + \" REVV\"\r\n                        totalREVV += parseFloat(finalPrize)\r\n                        totalRank += currentRank\r\n                    } else {\r\n                        event.unit = \"$\"\r\n                        event.tries = tryCount\r\n                        event.dollarReward += parseFloat(finalPrize)\r\n                        totalDollars += parseFloat(finalPrize)\r\n                        event.RewardString = event.dollarReward.toString() + \" $\"\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (totalRank > 0 && totalREVV > 0) {\r\n            this.setAverages(totalREVV / participatedREVVCount, totalRank / participatedREVVCount, totalTries / paidTriesCount)\r\n        } else {\r\n            this.setAverages(0, 0)\r\n        }\r\n\r\n        this.setTotalPrizes(totalREVV, totalDollars, totalTries)\r\n        this.setEventData(eventDeepCopy)\r\n        this.setEventDataLoaded(true)\r\n    }\r\n\r\n    setTotalPrizes(totalREVV, totalDollars, totalTries) {\r\n        this.setState({\r\n            totalREVV: totalREVV,\r\n            totalDollars: totalDollars,\r\n            totalTries: totalTries,\r\n        })\r\n    }\r\n\r\n    getWalletPositions = async () => {\r\n        this.setEventDataLoaded(false)\r\n        let walletPositions = {};\r\n        let allleaderboards = await revvData.get('walletPositions', { params: { walletAddress: this.state.walletAddress.toUpperCase() } })\r\n        allleaderboards = allleaderboards.data\r\n        this.state.eventData.forEach(event => {\r\n            let leaderboardPrefix = 'GAME_SESSION_ALPHA_A_'\r\n            if (event.data.splitLeaderboard) {\r\n                let ownerLeaderboard = leaderboardPrefix + event.id.toUpperCase() + '_SPLIT_OWNER'\r\n                let hiredLeaderboard = leaderboardPrefix + event.id.toUpperCase() + '_SPLIT_HIRED'\r\n                let ownerEntry = getArrayValue(allleaderboards, 'leaderboard_id', ownerLeaderboard)\r\n                let hiredEntry = getArrayValue(allleaderboards, 'leaderboard_id', hiredLeaderboard)\r\n\r\n                if (ownerEntry) {\r\n                    walletPositions[event.id] = ownerEntry\r\n                } else if (hiredEntry) {\r\n                    hiredEntry.hired = true\r\n                    walletPositions[event.id] = hiredEntry\r\n                }\r\n            } else {\r\n                let leaderboard = leaderboardPrefix + event.id.toUpperCase()\r\n                let ownerEntry = getArrayValue(allleaderboards, 'leaderboard_id', leaderboard)\r\n                if (ownerEntry) {\r\n                    walletPositions[event.id] = ownerEntry\r\n                }\r\n            }\r\n        });\r\n\r\n        let txns\r\n        await revvTransactions\r\n            .get(`&address=${this.state.walletAddress}`)\r\n            .then((response) => {\r\n                txns = response.data.result\r\n                txns = this.filterTransactions(txns);\r\n            }).catch((e) => {\r\n                console.error(e);\r\n            });\r\n        await this.setWalletPosition(walletPositions, txns)\r\n    }\r\n\r\n    filterTransactions(txns) {\r\n        txns = txns.filter((txn) => {\r\n            return txn.tokenSymbol === \"REVV\" && txn.to.toUpperCase() === \"0x069895FdA566d0364ABEc6e290BeE3D565c55666\".toUpperCase() &&\r\n                txn.value === \"5000000000000000000\";\r\n        });\r\n\r\n        txns = txns.map((txn) => {\r\n            txn.timeStamp = new Date(txn.timeStamp * 1000)\r\n            return txn;\r\n        })\r\n\r\n        return txns;\r\n    }\r\n\r\n\r\n    setAverages(averageREVV, averageRank, averageTries) {\r\n        this.setState({\r\n            averageREVV: averageREVV,\r\n            averageRank: averageRank,\r\n            averageTries: averageTries,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Grid container spacing={3} >\r\n                <Grid item md={12} xs={12}>\r\n                    <TextField\r\n                        id=\"wallet-address\"\r\n                        label=\"Wallet Address\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        focused\r\n                        placeholder=\"0x000...\"\r\n                        onChange={(e) => this.setWalletAddress(e.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                    <Button color=\"primary\" fullWidth variant=\"contained\" onClick={() => this.getWalletPositions()} >Get Wallet List</Button>\r\n                </Grid>\r\n                {this.state.totalREVV &&\r\n                    <React.Fragment>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"totalRevv\"\r\n                                label=\"Total REVV (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.totalREVV.toFixed(2).toString() + \" REVV\" + (this.state.REVVPrice ? \" (\" + (this.state.REVVPrice * this.state.totalREVV).toFixed(2).toString() + \" $)\" : \"\")}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"totalDollars\"\r\n                                label=\"Total Dollars (Old Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.totalDollars.toFixed(2).toString() + \" $\"}\r\n                            />\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                }{this.state.averageRank > 0 &&\r\n                    <React.Fragment>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"averageRank\"\r\n                                label=\"Average Rank (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.averageRank.toFixed(0).toString()}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"averageREVV\"\r\n                                label=\"Average REVV Earned (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.averageREVV.toFixed(2).toString() + \" REVV\" + (this.state.REVVPrice ? \" (\" + (this.state.REVVPrice * this.state.averageREVV).toFixed(2).toString() + \" $)\" : \"\")}\r\n                            />\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                }{this.state.totalTries &&\r\n                    <React.Fragment>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"totalTries\"\r\n                                label=\"Total Tries (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.totalTries.toFixed(0).toString() + \" Tries\" + (this.state.REVVPrice ? \" (\" + (this.state.totalTries * 5) + \" REVV/\" + (this.state.REVVPrice * this.state.totalTries * 5).toFixed(2).toString() + \" $)\" : \"\")}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={6} xs={12} alignContent=\"center\" alignItems=\"center\">\r\n                            <TextField\r\n                                id=\"averageTries\"\r\n                                label=\"Average Tries (New Prize Structure)\"\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                fullWidth\r\n                                value={this.state.averageTries.toFixed(0).toString() + \" Tries\" + (this.state.REVVPrice ? \" (\" + (this.state.averageTries * 5).toFixed(2) + \" REVV/\" + (this.state.REVVPrice * this.state.averageTries * 5).toFixed(2).toString() + \" $)\" : \"\")}\r\n                            />\r\n                        </Grid>\r\n                    </React.Fragment>\r\n                }\r\n                <Grid item xs={12}>\r\n                    <MaterialTable\r\n                        theme={theme()}\r\n                        style={{ width: \"100%\", display: \"grid\" }}\r\n                        title=\"REVV Leaderboards\"\r\n                        columns={this.state.columns}\r\n                        data={this.state.eventData}\r\n                        icons={tableIcons}\r\n                        isLoading={!this.state.eventDataLoaded}\r\n                        options={{\r\n                            pageSize: 10,\r\n                            pageSizeOptions: [5, 10, 20, { value: this.state.eventData ? parseInt(this.state.eventData.length) : 100, label: 'All' }],\r\n                            filtering: true,\r\n                            selection: true,\r\n                            search: false,\r\n                            toolbar: true,\r\n                            grouping: true,\r\n                            exportButton: true\r\n\r\n                        }}\r\n                        onSelectionChange={(rows) => {\r\n                            let totalREVV = 0.0\r\n                            let totalDollars = 0.0\r\n                            let totalRank = 0.0\r\n                            let participatedREVVCount = 0.0\r\n                            let paidTriesCount = 0.0\r\n                            let totalTries = 0.0\r\n\r\n                            if (rows.length === 0) {\r\n                                rows = this.state.eventData\r\n                            }\r\n\r\n                            rows.forEach(row => {\r\n                                totalREVV += parseFloat(row.REVVReward)\r\n                                totalDollars += parseFloat(row.dollarReward)\r\n                                if (row.unit === \"REVV\") {\r\n                                    totalRank += parseFloat(row.rank)\r\n                                    participatedREVVCount += 1.0\r\n                                    totalTries += row.tries\r\n                                    if (row.tries && row.tries > 0) {\r\n                                        paidTriesCount += 1.0\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            if (totalRank > 0 && totalREVV > 0) {\r\n                                this.setAverages(totalREVV / participatedREVVCount, totalRank / participatedREVVCount, totalTries / paidTriesCount)\r\n                            } else {\r\n                                this.setAverages(0, 0)\r\n                            }\r\n\r\n                            this.setTotalPrizes(totalREVV, totalDollars, totalTries)\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://api.polygonscan.com/api?module=account&action=tokentx&contractaddress=0x70c006878a5a50ed185ac4c87d837633923de296&sort=desc&apikey=NW6MQ4UW5JIEVBH61JW4AK3WY2Q27ZZIM7\"\r\n});"],"sourceRoot":""}